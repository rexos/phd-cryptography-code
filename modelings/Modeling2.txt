// load "C:/Users/20204876/OneDrive - TU Eindhoven/Desktop/CCMP/system_3.0.txt";
//SetVerbose("Faugere",0);

function GetRandomGoppaCode(F,t)
    g := IrreduciblePolynomial(F,t);
    L := [el : el in F];
    C := GoppaCode(L, g);
    return C, g;
end function;
function GenError(n,weight)
    p := Random(SymmetricGroup(n));
    etmp := [1 : i in [1..weight]] cat [0 : i in [1..n - weight]];
    return [etmp[i^p] : i in [1..n]];
end function;

function CreateSystem(C,e,t1)
    n := Length(C);
    k := Dimension(C);
    m := n - k;
    //t1 := Floor((MinimumDistance(C) - 1) / 2);
    l := Floor(Log(2, t1)) + 1;
    print(l);
    P<[x]> := PolynomialRing(GF(2), n + n*l,"grevlex");
    H := ParityCheckMatrix(C);


    function ToBinary(val)
        bits := Intseq(val,2);
        return bits cat [0 : i in [1..l - #bits]];
    end function;

    

    //e := GenError(t1);
    t := ToBinary(t1);
    s := Vector(GF(2),e)*Transpose(H);

    function ParityCheck(H, s)
        S := [];
        j := 1;
        for row in Rows(H) do
            S[j] := &+([x[i] : i in [1..n] | row[i] eq 1]) + s[j];
            j +:= 1;
        end for;
        return S;
    end function;
    
    function WeightComputation()
        S := [x[n+1] + x[1]];
        for j in [2..l] do
            S := S cat [x[n+j]];
        end for;
        for i in [2..n] do
            B := [x[i] + x[n+(i-1)*l+1] + x[n+(i-2)*l + 1]];
            for j in [2..l] do
                B := B cat [x[n+(i-1)*l+j] + x[n+(i-2)*l + j] + x[n+(i-2)*l+j-1] + x[n+(i-1)*l+j-1]*x[n+(i-2)*l+ j-1]];
            end for;
            S := S  cat B cat [(x[n+(i-1)*l+l] + 1)*x[n+(i-2)*l+ l]];
        end for;
        return S;
    end function;

    function WeightConstraint()
        return [x[n + (n-1)*l + j] + t[j] : j in [1..l]];
    end function;
    
    function WeightConstraint_opt()
        B := [x[n] + t[1] + x[n+(n-2)*l + 1]];
        for j in [2..l] do
            B := B cat [t[j] + x[n+(n-2)*l + j] + x[n+(n-2)*l+j-1] + t[j-1]*x[n+(n-2)*l+ j-1]];
        end for;
        return B;
    end function;

    function FieldEquations()
        return [x[i]^2 + x[i] : i in [1..n + n*l]];
    end function;

    S := ParityCheck(H, s) cat WeightComputation();
    S := S cat WeightConstraint();
    S cat:= FieldEquations();
    
    SS := WeightComputation();
    SS cat:= WeightConstraint();
    SS cat:= FieldEquations();
    
    SSq := [];
    SSl := [];
    
     for s in SS do
        d := Degree(s);
        if d eq 2 then
            SSq cat:= [s];
        else
            SSl cat:= [s];
        end if;
    end for;
    
    hom2S := [];
    Qh := [];
    Ph := [];
    for s in S do
        d := Degree(s);
        homs := P!0;
        terms := Terms(s);
        for term in terms do
            if Degree(term) eq d then
                homs +:= term;               
            end if;
        end for;
        if Degree(homs) eq 2 then
            Qh cat:= [homs];
        else
            Ph cat:= [homs];
        end if; 
        hom2S cat:= [homs];
    end for;

    return S,Qh,Ph,hom2S,e,t,SSq,SSl,P,m;
end function;

function Theorem1(n)
    l := Floor(Log(2, n)) + 1;
    return 2*n + (l-1)*Ceiling(n/2)+1;
end function;

//C, g := GetRandomGoppaCode(GF(2^2), 4);
C := RandomLinearCode(GF(2),16,1);
t1 := Floor((MinimumDistance(C) - 1) / 2);
t1:=2;
e := GenError(Length(C),t1);

S,Qh,Ph,hom2S,e,t,SSq,SSl,P,m := CreateSystem(C,e,t1);
Q := P/Ideal(Qh);
HilbertSeries(P/Ideal(Qh cat Ph[m+1..#Ph]));
HilbertSeries(Q);
//Theorem1();
//Q := P/Ideal(Qh cat Ph[m+1..#Ph]);
//HilbertSeries(Q);
//Q := P/Ideal(Qh cat Ph);
//HilbertSeries(Q);
